{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rock & Roll Engine This project is in early development stages & not yet fully functional. Documentation may be incomplete. Description An engine to create Mega Man/Rockman style platform games. Navigation Building Source Code Game Configuration","title":"Home"},{"location":"#rock-roll-engine","text":"This project is in early development stages & not yet fully functional. Documentation may be incomplete.","title":"Rock &amp; Roll Engine"},{"location":"#description","text":"An engine to create Mega Man/Rockman style platform games.","title":"Description"},{"location":"#navigation","text":"Building Source Code Game Configuration","title":"Navigation"},{"location":"build/","text":"Building Source Code See downloads section for how to get source code. Required Libraries Bundled Libraries cxxopts v3.2.0 ( MIT ) lua v5.4.7 ( MIT ) (disabled) tmxlite v1.4.4 (zlib) External Libraries SDL2 (zlib) ( source ) SDL2_mixer (zlib) ( source ) SDL2_image (zlib) ( source ) pugixml (MIT) ( source ) Required Build Tools GNU compatible C++ compiler such as gcc or clang with C++20 support (untested with other compilers). CMake pkg-config or pkgconf Running CMake Commands Open a command line/terminal. Change to the source root directory. Build in Source Root Execute cmake . to generate build files. Execute cmake --build . to build program executable. Build in Separate Directory Execute cmake -B <dir> to generate build files in directory <dir> . Execute cmake --build <dir> to build program in directory <dir> . Example: $ cmake -B build -- Building for: Ninja -- The C compiler identification is GNU 14.2.0 -- The CXX compiler identification is GNU 14.2.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: ... - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: ... - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Found PkgConfig: ... -- Checking for one of the modules 'SDL2_mixer>=2.0.0' -- Checking for one of the modules 'SDL2_image>=2.0.0' -- Configuring done (2.9s) -- Generating done (0.0s) -- Build files have been written to: ... $ cmake --build build [1/9] Building CXX object ... ... Note: Build files can be regenerated with the --fresh option: $ cmake --fresh -B build If you generate build files from a directory other than the source root you must point to it: $ mkdir build && cd build $ cmake ../ ... $ cmake --build ../ ...","title":"Build"},{"location":"build/#building-source-code","text":"See downloads section for how to get source code.","title":"Building Source Code"},{"location":"build/#required-libraries","text":"","title":"Required Libraries"},{"location":"build/#bundled-libraries","text":"cxxopts v3.2.0 ( MIT ) lua v5.4.7 ( MIT ) (disabled) tmxlite v1.4.4 (zlib)","title":"Bundled Libraries"},{"location":"build/#external-libraries","text":"SDL2 (zlib) ( source ) SDL2_mixer (zlib) ( source ) SDL2_image (zlib) ( source ) pugixml (MIT) ( source )","title":"External Libraries"},{"location":"build/#required-build-tools","text":"GNU compatible C++ compiler such as gcc or clang with C++20 support (untested with other compilers). CMake pkg-config or pkgconf","title":"Required Build Tools"},{"location":"build/#running-cmake-commands","text":"Open a command line/terminal. Change to the source root directory.","title":"Running CMake Commands"},{"location":"build/#build-in-source-root","text":"Execute cmake . to generate build files. Execute cmake --build . to build program executable.","title":"Build in Source Root"},{"location":"build/#build-in-separate-directory","text":"Execute cmake -B <dir> to generate build files in directory <dir> . Execute cmake --build <dir> to build program in directory <dir> . Example: $ cmake -B build -- Building for: Ninja -- The C compiler identification is GNU 14.2.0 -- The CXX compiler identification is GNU 14.2.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: ... - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: ... - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Found PkgConfig: ... -- Checking for one of the modules 'SDL2_mixer>=2.0.0' -- Checking for one of the modules 'SDL2_image>=2.0.0' -- Configuring done (2.9s) -- Generating done (0.0s) -- Build files have been written to: ... $ cmake --build build [1/9] Building CXX object ... ... Note: Build files can be regenerated with the --fresh option: $ cmake --fresh -B build If you generate build files from a directory other than the source root you must point to it: $ mkdir build && cd build $ cmake ../ ... $ cmake --build ../ ...","title":"Build in Separate Directory"},{"location":"download/","text":"Downloads Source Source code can be downloaded from Codeberg or GitHub . See building section for how to build from source code. Binaries Not yet available.","title":"Download"},{"location":"download/#downloads","text":"","title":"Downloads"},{"location":"download/#source","text":"Source code can be downloaded from Codeberg or GitHub . See building section for how to build from source code.","title":"Source"},{"location":"download/#binaries","text":"Not yet available.","title":"Binaries"},{"location":"game/","text":"Game Configuration This project is in early development stages & not yet fully functional. Documentation may be incomplete. Configuration Files Games are configured using XML files located in the data/conf subdirectory where engine executable is located. game.xml This is the main configuration file. It must have a root game node. The following nested nodes are supported: title: Text displayed in window title bar. icon: Icon displayed in window title bar (not yet supported) . scale: Window scaling factor. Max 4. step_delay: Game stepping delay in milliseconds. intro: Configures the introduction movie. Attributes: movie: Movie played in introduction. Configured in movies.xml . menu: Configured main menu. Attributes: id: Menu identifier. background: Menu background image. Images located in data/background directory. music: Menu music. See music . sprites.xml Configures entity sprites. Must contain a sprites root node. Each sprite is configured in a sprite node. Each sprite must have an id attribute. The following nested nodes are supported: filename: Base filename of sprite image. Attributes: index: Used for static sprites. size: Sprite frame dimensions. Supports width & height attributes. animation: Animation definition. Supports mode attribute to identify each animation mode. Nested frame nodes are used to define a frame of animation using index & delay attributes. Example: <sprites> <sprite id=\"player\"> <filename>character</filename> <size width=\"32\" height=\"32\" /> <animation mode=\"idle\" default=\"true\"> <frame index=\"6\" delay=\"4000\" /> <frame index=\"7\" delay=\"250\" /> </animation> <animation mode=\"run\"> <frame index=\"10\" delay=\"100\" /> <frame index=\"9\" delay=\"100\" /> <frame index=\"10\" delay=\"100\" /> <frame index=\"11\" delay=\"100\" /> </animation> <animation mode=\"fall\"> <frame index=\"0\" delay=\"10000\" /> </animation> </sprite> <sprite id=\"enemy\"> <filename>enemy</filename> <size width=\"16\" height=\"16\" /> <animation mode=\"idle\" default=\"true\"> <frame index=\"0\" delay=\"4000\" /> <frame index=\"1\" delay=\"250\" /> </animation> <animation mode=\"run\"> <frame index=\"6\" delay=\"100\" /> <frame index=\"7\" delay=\"100\" /> <frame index=\"8\" delay=\"100\" /> <frame index=\"7\" delay=\"100\" /> </animation> <animation mode=\"fall\"> <frame index=\"3\" delay=\"10000\" /> </animation> </sprite> <sprite id=\"flying_enemy\"> <filename>flying_enemy</filename> <size width=\"22\" height=\"24\" /> <animation mode=\"idle\" default=\"true\"> <frame index=\"0\" delay=\"250\" /> <frame index=\"1\" delay=\"250\" /> </animation> </sprite> </sprites> entities.xml Configures all the entities available in the game. Must contain a root entities node. Example: <entities> <entity id=\"player\" sprite=\"player\" width=\"18\" height=\"23\"> <momentum>3.0</momentum> </entity> <entity id=\"enemy\" sprite=\"enemy\" width=\"16\" height=\"12\"> <momentum>1.0</momentum> </entity> <entity id=\"flying_enemy\" sprite=\"flying_enemy\" width=\"22\" height=\"24\"> <momentum>1.0</momentum> <gravity>0.0</gravity> </entity> </entities> scenes.xml Currently not supported. movies.xml Example: <movies> <movie id=\"intro\" fade_in=\"200\" fade_out=\"200\"> <frame ms=\"5000\">NULL</frame> <text delay=\"0\" duration=\"10000\">Rock & Roll Engine</text> <text delay=\"0\" duration=\"10000\">(alpha)</text> </movie> </movies> Scenes Scene maps are built in the Tiled Map Editor format & stored in the data/scene directory. They are configured in scenes.xml . The following layer names are supported: weather: not implemented foreground: Front most tile layer drawn above entities. collision: Tiles on this layer define scene points of collision. objects: not implemented terrain: First tile layer drawn under entities. background: Second tile layer drawn under entities. s_background: First background image layer. Parallax scrolling supported using custom property scroll_rate float value. s_background2: Second background image layer. Parallax scrolling also supported. Audio Sound Effects Currently not supported. Music Music files are located in the data/music directory. The engine supports playing Ogg Vorbis audio. Files must have either the .oga or .ogg filename extension. Graphics Currently only PNG images supported. Sprite Images Sprites are stored in the data/sprite directory. They are configured in sprites.xml . Tilesets Scene tileset images are located in data/tileset by default. Storing in other locations may work but not officially supported. These tilesets are used for creating scene maps .","title":"Game Configuration"},{"location":"game/#game-configuration","text":"This project is in early development stages & not yet fully functional. Documentation may be incomplete.","title":"Game Configuration"},{"location":"game/#configuration-files","text":"Games are configured using XML files located in the data/conf subdirectory where engine executable is located.","title":"Configuration Files"},{"location":"game/#gamexml","text":"This is the main configuration file. It must have a root game node. The following nested nodes are supported: title: Text displayed in window title bar. icon: Icon displayed in window title bar (not yet supported) . scale: Window scaling factor. Max 4. step_delay: Game stepping delay in milliseconds. intro: Configures the introduction movie. Attributes: movie: Movie played in introduction. Configured in movies.xml . menu: Configured main menu. Attributes: id: Menu identifier. background: Menu background image. Images located in data/background directory. music: Menu music. See music .","title":"game.xml"},{"location":"game/#spritesxml","text":"Configures entity sprites. Must contain a sprites root node. Each sprite is configured in a sprite node. Each sprite must have an id attribute. The following nested nodes are supported: filename: Base filename of sprite image. Attributes: index: Used for static sprites. size: Sprite frame dimensions. Supports width & height attributes. animation: Animation definition. Supports mode attribute to identify each animation mode. Nested frame nodes are used to define a frame of animation using index & delay attributes. Example: <sprites> <sprite id=\"player\"> <filename>character</filename> <size width=\"32\" height=\"32\" /> <animation mode=\"idle\" default=\"true\"> <frame index=\"6\" delay=\"4000\" /> <frame index=\"7\" delay=\"250\" /> </animation> <animation mode=\"run\"> <frame index=\"10\" delay=\"100\" /> <frame index=\"9\" delay=\"100\" /> <frame index=\"10\" delay=\"100\" /> <frame index=\"11\" delay=\"100\" /> </animation> <animation mode=\"fall\"> <frame index=\"0\" delay=\"10000\" /> </animation> </sprite> <sprite id=\"enemy\"> <filename>enemy</filename> <size width=\"16\" height=\"16\" /> <animation mode=\"idle\" default=\"true\"> <frame index=\"0\" delay=\"4000\" /> <frame index=\"1\" delay=\"250\" /> </animation> <animation mode=\"run\"> <frame index=\"6\" delay=\"100\" /> <frame index=\"7\" delay=\"100\" /> <frame index=\"8\" delay=\"100\" /> <frame index=\"7\" delay=\"100\" /> </animation> <animation mode=\"fall\"> <frame index=\"3\" delay=\"10000\" /> </animation> </sprite> <sprite id=\"flying_enemy\"> <filename>flying_enemy</filename> <size width=\"22\" height=\"24\" /> <animation mode=\"idle\" default=\"true\"> <frame index=\"0\" delay=\"250\" /> <frame index=\"1\" delay=\"250\" /> </animation> </sprite> </sprites>","title":"sprites.xml"},{"location":"game/#entitiesxml","text":"Configures all the entities available in the game. Must contain a root entities node. Example: <entities> <entity id=\"player\" sprite=\"player\" width=\"18\" height=\"23\"> <momentum>3.0</momentum> </entity> <entity id=\"enemy\" sprite=\"enemy\" width=\"16\" height=\"12\"> <momentum>1.0</momentum> </entity> <entity id=\"flying_enemy\" sprite=\"flying_enemy\" width=\"22\" height=\"24\"> <momentum>1.0</momentum> <gravity>0.0</gravity> </entity> </entities>","title":"entities.xml"},{"location":"game/#scenesxml","text":"Currently not supported.","title":"scenes.xml"},{"location":"game/#moviesxml","text":"Example: <movies> <movie id=\"intro\" fade_in=\"200\" fade_out=\"200\"> <frame ms=\"5000\">NULL</frame> <text delay=\"0\" duration=\"10000\">Rock & Roll Engine</text> <text delay=\"0\" duration=\"10000\">(alpha)</text> </movie> </movies>","title":"movies.xml"},{"location":"game/#scenes","text":"Scene maps are built in the Tiled Map Editor format & stored in the data/scene directory. They are configured in scenes.xml . The following layer names are supported: weather: not implemented foreground: Front most tile layer drawn above entities. collision: Tiles on this layer define scene points of collision. objects: not implemented terrain: First tile layer drawn under entities. background: Second tile layer drawn under entities. s_background: First background image layer. Parallax scrolling supported using custom property scroll_rate float value. s_background2: Second background image layer. Parallax scrolling also supported.","title":"Scenes"},{"location":"game/#audio","text":"","title":"Audio"},{"location":"game/#sound-effects","text":"Currently not supported.","title":"Sound Effects"},{"location":"game/#music","text":"Music files are located in the data/music directory. The engine supports playing Ogg Vorbis audio. Files must have either the .oga or .ogg filename extension.","title":"Music"},{"location":"game/#graphics","text":"Currently only PNG images supported.","title":"Graphics"},{"location":"game/#sprite-images","text":"Sprites are stored in the data/sprite directory. They are configured in sprites.xml .","title":"Sprite Images"},{"location":"game/#tilesets","text":"Scene tileset images are located in data/tileset by default. Storing in other locations may work but not officially supported. These tilesets are used for creating scene maps .","title":"Tilesets"}]}